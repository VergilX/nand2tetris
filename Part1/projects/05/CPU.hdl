// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Incoming signal
    Not (in=instruction[15], out=notinstr15);
    Or (a=notinstr15, b=instruction[5], out=Asel);
    Mux16 (a=ALUout, b=instruction, sel=notinstr15, out=Ainp);              // If A instruction, pass
    ARegister (in=Ainp, load=Asel, out=Aout, out[0..14]=addressM);          // Load if A instruction or C instruction and dest has Aregister

    // ALU
    And (a=instruction[15], b=instruction[12], out=ALUMuxsel);              // Select A if a=0, else select inM
    Mux16 (a=Aout, b=inM, sel=ALUMuxsel, out=y);

    And (a=instruction[15], b=instruction[4], out=Dload);                   // Load if dest contains D
    DRegister (in=ALUout, load=Dload, out=x);

    ALU (x=x, y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUout, zr=zr, ng=ng);

    // Program counter : Uses jump bits to determine next address
    Not (in=zr, out=notzr);
    Not (in=ng, out=notng);
    And (a=notzr, b=notng, out=A3in);

    And (a=A3in, b=instruction[0], out=A3);
    And (a=zr, b=instruction[1], out=A2);
    And (a=ng, b=instruction[2], out=A1);

    Or (a=A3, b=A2, out=A3orA2);
    Or (a=A3orA2, b=A1, out=PCMuxin);
    Mux (a=false, b=PCMuxin, sel=instruction[15], out=PCload);

    Not (in=PCload, out=PCinc);                                         // If not loaded, increment

    PC (in=Aout, load=PCload, inc=PCinc, reset=reset, out[0..14]=pc);

    // writeM
    And (a=instruction[15], b=instruction[3], out=writeM);              // If destination contains M
}
